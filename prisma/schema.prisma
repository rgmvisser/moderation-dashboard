datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

enum Status {
  allowed
  flagged
  hidden
}

enum SignInMethod {
  email
  google
  facebook
  apple
  unknown
  phone
}

model Tenant {
  id   String @id @default(cuid())
  name String
  slug String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users         User[]
  contents      Content[]
  projects      Project[]
  reasons       Reason[]
  statusReasons StatusReasons[]
  actions       Action[]
  topics        Topic[]

  moderatorFilters     ModeratorFilters[]
  moderatorRoles       ModeratorRole[]
  apiKeys              ApiKey[]
  messages             Message[]
  images               Image[]
  lists                List[]
  listItems            ListItem[]
  awsModerationResults AWSModerationResult[]
  ocrs                 ImageOCR[]
  messageInformations  MessageInformation[]
}

model ApiKey {
  id        String   @id @default(cuid())
  hashedKey String   @unique
  keyHint   String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   Moderator @relation(fields: [moderatorId], references: [id], onDelete: Cascade)
  moderatorId String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId    String
}

enum Role {
  admin
  moderator
}

model ModeratorRole {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role

  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId    String
  moderator   Moderator @relation(fields: [moderatorId], references: [id])
  moderatorId String
}

model Moderator {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  name             String
  email            String            @unique
  avatar           String?
  moderatorFilters ModeratorFilters?
  actions          Action[]
  roles            ModeratorRole[]
  authentication   Authentication[]
  apiKeys          ApiKey[]
  listItems        ListItem[]
}

enum CMAuthenticationMethod {
  EmailPassword
}

model Authentication {
  id          String                 @id @default(cuid())
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  provider    CMAuthenticationMethod
  hash        String
  moderator   Moderator              @relation(fields: [moderatorId], references: [id])
  moderatorId String
}

model User {
  id         String @id @default(cuid())
  externalId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name            String?
  signInMethod    SignInMethod
  location        String?
  emailDomain     String?
  profileImageURL String?
  status          Status

  contents Content[]
  actions  Action[]
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String
}

model BacklogMessage {
  id                     String @id @default(cuid())
  millisecondsAfterStart Int
  content                String

  userId    String
  projectId String
  topicId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Status
}

model Content {
  id                     String   @id @default(cuid())
  externalId             String   @unique
  millisecondsAfterStart Int
  message                Message?
  image                  Image?
  status                 Status

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId   String
  actions   Action[]
}

model Message {
  id          String              @id @default(cuid())
  content     Content             @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId   String              @unique
  text        String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  tenant      Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId    String
  information MessageInformation?
}

model Image {
  id                  String               @id @default(cuid())
  content             Content              @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId           String               @unique
  url                 String               @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  tenant              Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId            String
  awsModerationResult AWSModerationResult?
  ocr                 ImageOCR?
}

model Project {
  id         String   @id @default(cuid())
  externalId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String

  contents Content[]
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String
  topics   Topic[]
}

model Topic {
  id         String   @id @default(cuid())
  externalId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String

  contents  Content[]
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId  String
  projectId String
}

model ModeratorFilters {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projects  String
  topics    String
  statuses  String

  moderator   Moderator @relation(fields: [moderatorId], references: [id], onDelete: Cascade)
  moderatorId String    @unique
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId    String
}

model Reason {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  name          String
  statusReasons StatusReasons[]
  actions       Action[]
  tenant        Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId      String
  custom        Boolean         @default(false)

  @@unique([name, tenantId])
}

model StatusReasons {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Status
  reason    Reason   @relation(fields: [reasonId], references: [id], onDelete: Cascade)
  reasonId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId  String
}

enum ActionType {
  ChangeStatus
}

model Action {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  info      Json       @default("{}")
  type      ActionType

  tenant            Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  reason            Reason     @relation(fields: [reasonId], references: [id], onDelete: Cascade)
  reasonId          String
  reasonInformation String?
  takenBy           Moderator? @relation(fields: [takenById], references: [id], onDelete: Cascade)
  takenById         String?

  content   Content? @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
}

enum ListType {
  strings
  locations
  phone_number
  domains
}

model List {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  type      ListType
  tenant    Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId  String
  items     ListItem[]
}

model ListItem {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  value       String
  list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId      String
  createdBy   Moderator @relation(fields: [moderatorId], references: [id])
  moderatorId String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId    String

  @@unique([listId, value])
}

model AWSModerationResult {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     Image    @relation(fields: [url], references: [url])
  url       String   @unique
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId  String

  highestConfidenceLabel String
  highestConfidenceScore Float
  averageConfidenceScore Float
  labels                 Json
  labelNames             Json
  processTime            Float
}

model ImageOCR {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  image       Image    @relation(fields: [url], references: [url])
  url         String   @unique
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId    String
  text        String
  processTime Float
}

model MessageInformation {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  message        Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId      String   @unique
  normalizedText String
  qrCode         String?
  phoneNumbers   String[]
  domains        String[]
  emails         String[]
  mentions       String[]
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId       String
}
