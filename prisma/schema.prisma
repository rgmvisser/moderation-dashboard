datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Status {
  allowed
  flagged
  hidden
}

enum SignInMethod {
  email
  google
  facebook
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  signInMethod SignInMethod
  location     String
  status       Status

  messages Message[]
  Action   Action[]
}

model BacklogMessage {
  id                     String @id @default(cuid())
  millisecondsAfterStart Int
  message                String

  userId    String
  projectId String
  threadId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Status
}

model Message {
  id                     String @id @default(cuid())
  millisecondsAfterStart Int
  message                String
  status                 Status

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  thread    Thread   @relation(fields: [threadId], references: [id])
  threadId  String
  Action    Action[]
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  messages Message[]
}

model Thread {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  messages Message[]
}

model Admin {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  avatar       String?
  AdminFilters AdminFilters?
  Action       Action[]
}

model AdminFilters {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projects  String
  threads   String
  statuses  String

  admin   Admin  @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId String @unique
}

model Reason {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  name          String
  StatusReasons StatusReasons[]
  Action        Action[]
}

model StatusReasons {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Status
  reason    Reason   @relation(fields: [reasonId], references: [id], onDelete: Cascade)
  reasonId  String
}

enum ActionType {
  ChangeStatus
}

model Action {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  info      Json       @default("{}")
  type      ActionType

  reason            Reason  @relation(fields: [reasonId], references: [id], onDelete: Cascade)
  reasonId          String
  reasonInformation String?
  takenBy           Admin?  @relation(fields: [takenById], references: [id], onDelete: Cascade)
  takenById         String?

  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
}

// model Password {
//   hash String

//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   userId String @unique
// }

// model Note {
//   id    String @id @default(cuid())
//   title String
//   body  String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   userId String
// }
