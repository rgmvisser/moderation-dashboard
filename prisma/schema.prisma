datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

enum Status {
  allowed
  flagged
  hidden
}

enum SignInMethod {
  email
  google
  facebook
}

model Tenant {
  id   String @id @default(cuid())
  name String
  slug String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User          User[]
  Message       Message[]
  Project       Project[]
  Reason        Reason[]
  StatusReasons StatusReasons[]
  Action        Action[]
  Thread        Thread[]

  ModeratorFilters ModeratorFilters[]
  ModeratorRole    ModeratorRole[]
}

enum Role {
  admin
  moderator
}

model ModeratorRole {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role

  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId    String
  Moderator   Moderator @relation(fields: [moderatorId], references: [id])
  moderatorId String
}

model Moderator {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  name             String
  avatar           String?
  ModeratorFilters ModeratorFilters?
  Action           Action[]
  roles            ModeratorRole[]
}

model User {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  signInMethod SignInMethod
  location     String
  status       Status

  messages Message[]
  Action   Action[]
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String
}

model BacklogMessage {
  id                     String @id @default(cuid())
  millisecondsAfterStart Int
  message                String

  userId    String
  projectId String
  threadId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Status
}

model Message {
  id                     String @id @default(cuid())
  millisecondsAfterStart Int
  message                String
  status                 Status

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  thread    Thread   @relation(fields: [threadId], references: [id])
  threadId  String
  Action    Action[]
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  messages Message[]
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String
}

model Thread {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  messages Message[]
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String
}

model ModeratorFilters {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projects  String
  threads   String
  statuses  String

  moderator   Moderator @relation(fields: [moderatorId], references: [id], onDelete: Cascade)
  moderatorId String    @unique
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId    String
}

model Reason {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  name          String
  StatusReasons StatusReasons[]
  Action        Action[]
  tenant        Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId      String
}

model StatusReasons {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Status
  reason    Reason   @relation(fields: [reasonId], references: [id], onDelete: Cascade)
  reasonId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId  String
}

enum ActionType {
  ChangeStatus
}

model Action {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  info      Json       @default("{}")
  type      ActionType

  tenant            Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  reason            Reason     @relation(fields: [reasonId], references: [id], onDelete: Cascade)
  reasonId          String
  reasonInformation String?
  takenBy           Moderator? @relation(fields: [takenById], references: [id], onDelete: Cascade)
  takenById         String?

  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
}
