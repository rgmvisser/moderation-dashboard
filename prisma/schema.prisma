datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Status {
  allowed
  flagged
  hidden
}

enum SignInMethod {
  email
  google
  facebook
}

model User {
  id           String       @id @default(cuid())
  name         String
  signInMethod SignInMethod
  location     String
  status       Status

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
}

model BacklogMessage {
  id                     String @id @default(cuid())
  millisecondsAfterStart Int
  message                String

  userId    String
  projectId String
  threadId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Status
}

model Message {
  id                     String @id @default(cuid())
  millisecondsAfterStart Int
  message                String
  status                 Status

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  thread    Thread  @relation(fields: [threadId], references: [id])
  threadId  String
}

model Project {
  id   String @id @default(cuid())
  name String

  messages Message[]
}

model Thread {
  id   String @id @default(cuid())
  name String

  messages Message[]
}

// model Password {
//   hash String

//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   userId String @unique
// }

// model Note {
//   id    String @id @default(cuid())
//   title String
//   body  String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   userId String
// }
